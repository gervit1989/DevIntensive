package com.softdesign.devintensive.data.storage.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class MUserDao extends AbstractDao<MUser, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity MUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RemoteId = new Property(1, String.class, "remoteId", false, "REMOTE_ID");
        public final static Property FullName = new Property(2, String.class, "fullName", false, "FULL_NAME");
        public final static Property Photo = new Property(3, String.class, "photo", false, "PHOTO");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Codelines = new Property(5, int.class, "codelines", false, "CODELINES");
    };

    private DaoSession daoSession;


    public MUserDao(DaoConfig config) {
        super(config);
    }
    
    public MUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REMOTE_ID\" TEXT NOT NULL UNIQUE ," + // 1: remoteId
                "\"FULL_NAME\" TEXT NOT NULL UNIQUE ," + // 2: fullName
                "\"PHOTO\" TEXT," + // 3: photo
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"CODELINES\" INTEGER NOT NULL );"); // 5: codelines
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getRemoteId());
        stmt.bindString(3, entity.getFullName());
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getCodelines());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getRemoteId());
        stmt.bindString(3, entity.getFullName());
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getCodelines());
    }

    @Override
    protected final void attachEntity(MUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MUser readEntity(Cursor cursor, int offset) {
        MUser entity = new MUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // remoteId
            cursor.getString(offset + 2), // fullName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.getInt(offset + 5) // codelines
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemoteId(cursor.getString(offset + 1));
        entity.setFullName(cursor.getString(offset + 2));
        entity.setPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCodelines(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
